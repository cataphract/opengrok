/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2005 Trond Norbye.  All rights reserved.
 * Use is subject to license terms.
 */

/*
 * ident	"@(#)EditorConfigPanel.java 1.1     06/02/22 SMI"
 */

package org.opensolaris.opengrok.search.scope;

/**
 * The EditorConfigPanel is used to let the user select the editor to use, and / or modify it's
 * properties.
 * @author Trond Norbye
 * @todo The "command"-section should be replaced by a getPropertiesPane from the editor
 * to allow each editor to customize it's own properties. This requires refactoring
 * of the Config class...
 */
public class EditorConfigPanel extends javax.swing.JPanel {
    
    /** Creates new form EditorConfigPanel */
    public EditorConfigPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        editorCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        commandField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");
        jLabel4.setText("jLabel4");

        jLabel1.setText("Editor");

        editorCombo.setModel(new javax.swing.DefaultComboBoxModel(Config.getInstance().getAvailableEditors().toArray()));
        editorCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                editorComboItemStateChanged(evt);
            }
        });

        jLabel2.setText("Command");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel5.setText("%d is the line number, %s is the file name");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                    .add(commandField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .add(editorCombo, 0, 374, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(editorCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(commandField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    /**
     * A new editor was selected. Update the properties for the editor
     * @param evt The event that triggered the callback
     */
    private void editorComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_editorComboItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            Editor editor = (Editor)evt.getItem();
            
            if (editor.getName().equals("Internal")) {
                commandField.setEditable(false);
                commandField.setText("");
            } else {
                commandField.setEditable(true);
                commandField.setText(editor.getCommand());
            }
        }
    }//GEN-LAST:event_editorComboItemStateChanged
    
    /**
     * Update the GUI elements to display the current editor as the selected one
     * @param editor The editor that should be displayed
     */
    public void setEditor(Editor editor) {
        editorCombo.setSelectedItem(editor);
        
        // If you select the first item in the list it will not trigger a
        // refresh so it will not update the command field...
        if (editor.getName().equals("Internal")) {
            commandField.setEditable(false);
            commandField.setText("");
        } else {
            commandField.setEditable(true);
            commandField.setText(editor.getCommand());
        }
    }
    
    /**
     * get the selected editor
     * @return The selected editor
     */
    public Editor getEditor() {
        return (Editor)editorCombo.getSelectedItem();
    }
    
    /**
     * Update the selected editor with the content of the GUI elements
     */
    public void updateEditor() {
        Editor ed = getEditor();
        ed.setCommand(commandField.getText().trim());
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField commandField;
    private javax.swing.JComboBox editorCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
    
}
