/* The following code was generated by JFlex 1.4.1 on 3/28/06 11:46 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

/*
 * ident	"%Z%%M% %I%     %E% SMI"
 */

package org.opensolaris.opengrok.analysis.document;
import java.util.*;
import java.io.*;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/28/06 11:46 PM from the specification file
 * <tt>/home/cb117521/prj/opengrok-0.3.1/src/org/opensolaris/opengrok/analysis/document/TroffXref.lex</tt>
 */
public class TroffXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TBL = 8;
  public static final int COMMENT = 4;
  public static final int HEADER = 2;
  public static final int BOLD = 6;
  public static final int TBLL = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\7\0\1\73\1\0\1\1\1\26\1\56\1\57\1\60\22\0\1\101"+
    "\1\104\1\40\3\104\1\100\1\41\1\52\1\72\1\70\2\104\1\2"+
    "\1\3\1\23\12\25\2\104\1\102\1\74\1\103\1\104\1\77\1\24"+
    "\1\42\1\15\1\50\1\51\1\24\1\44\1\30\1\32\2\24\1\35"+
    "\1\46\1\34\1\24\1\33\1\61\1\45\1\27\1\31\1\36\1\24"+
    "\1\47\1\43\2\24\1\104\1\37\2\104\1\75\1\104\1\12\1\53"+
    "\1\5\1\64\1\63\1\10\1\65\1\20\1\62\1\11\1\55\1\22"+
    "\1\21\1\7\1\6\1\14\1\71\1\54\1\4\1\16\1\67\1\13"+
    "\1\24\1\17\1\66\1\24\1\76\1\104\1\76\1\104\6\0\1\56"+
    "\u1fa2\0\2\56\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\3\3\1\4\2\3\1\5\1\6"+
    "\3\3\1\7\1\3\1\10\1\11\11\1\1\12\1\3"+
    "\1\13\3\3\7\0\1\14\4\0\1\2\15\0\1\15"+
    "\1\16\2\0\1\17\1\0\1\17\12\0\1\15\1\0"+
    "\1\17\2\20\2\0\2\21\2\0\2\21\1\0\1\21"+
    "\1\0\2\21\2\0\2\21\1\0\1\21\1\0\1\22"+
    "\1\23\1\24\1\25\3\0\1\26\1\0\1\27\1\0"+
    "\1\30\1\0\1\31\1\32\1\33\1\22\1\16\1\34"+
    "\1\17\1\15\1\35\1\34\1\36\1\0\1\1\1\24"+
    "\1\16\2\0\1\37\13\0\1\40\1\0\1\41\6\0"+
    "\2\4\5\0\1\21\1\42\2\0\1\21\1\43\2\21"+
    "\2\0\2\21\1\0\1\21\1\0\2\21\2\0\2\21"+
    "\1\0\1\21\16\0\1\44\2\0\1\21\1\42\2\0"+
    "\1\21\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u033c\0\u0495\0\u033c\0\u033c\0\u033c\0\u04da\0\u051f"+
    "\0\u0564\0\u033c\0\u05a9\0\u033c\0\u033c\0\u0381\0\u03c6\0\u05ee"+
    "\0\u040b\0\u0633\0\u0450\0\u0495\0\u0678\0\u051f\0\u033c\0\u06bd"+
    "\0\u033c\0\u0702\0\u0747\0\u078c\0\u03c6\0\u07d1\0\u0816\0\u040b"+
    "\0\u085b\0\u08a0\0\u08e5\0\u033c\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u033c\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u1299\0\u12de\0\u033c\0\u1323\0\u1368\0\u13ad\0\u03c6\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5\0\u040b"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd"+
    "\0\u033c\0\u033c\0\u033c\0\u033c\0\u1842\0\u1887\0\u18cc\0\u033c"+
    "\0\u1911\0\u033c\0\u1956\0\u03c6\0\u199b\0\u03c6\0\u03c6\0\u03c6"+
    "\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u19e0\0\u033c"+
    "\0\u1a25\0\u19e0\0\u03c6\0\u199b\0\u1a6a\0\u1aaf\0\u03c6\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u1da6\0\u17fd\0\u1deb\0\u033c\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u033c\0\u1f44\0\u1fce\0\u0747\0\u2013"+
    "\0\u2058\0\u209d\0\u147c\0\u1c4d\0\u20e2\0\u2127\0\u16a4\0\u033c"+
    "\0\u199b\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a"+
    "\0\u234f\0\u1a25\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715"+
    "\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u033c"+
    "\0\u293d\0\u2982\0\u21f6\0\u275a\0\u29c7\0\u2a0c\0\u241e\0\u28f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\2\17\17\20\1\21\1\20\1\17\1\22"+
    "\10\20\1\23\2\24\10\20\1\24\3\20\1\15\2\16"+
    "\7\20\1\24\1\20\1\24\1\15\1\24\1\17\3\24"+
    "\1\16\1\25\1\26\1\24\1\15\1\16\1\17\1\27"+
    "\17\20\1\21\1\20\1\17\1\22\10\20\1\30\1\24"+
    "\1\31\10\20\1\24\3\20\1\15\2\16\7\20\1\24"+
    "\1\20\1\24\1\15\1\24\1\17\3\24\1\16\1\25"+
    "\1\26\1\24\1\15\1\16\2\17\17\20\1\21\1\20"+
    "\1\17\1\32\10\20\1\23\2\24\10\20\1\24\3\20"+
    "\1\15\2\16\7\20\1\24\1\20\1\24\1\15\1\24"+
    "\1\17\3\24\1\16\1\25\1\26\1\24\1\15\1\16"+
    "\1\17\1\33\17\20\1\21\1\20\1\17\1\32\10\20"+
    "\1\30\2\24\10\20\1\24\3\20\1\15\2\16\7\20"+
    "\1\24\1\20\1\24\1\15\1\24\1\17\3\24\1\16"+
    "\1\25\1\26\1\24\1\15\1\16\2\17\17\20\1\21"+
    "\1\20\1\17\1\34\10\20\1\23\2\24\10\20\1\24"+
    "\3\20\1\15\2\16\7\20\1\24\1\20\1\24\1\15"+
    "\1\24\1\17\3\24\1\16\1\25\1\26\1\24\1\15"+
    "\1\16\1\17\1\33\17\20\1\21\1\20\1\17\1\34"+
    "\10\20\1\30\2\24\10\20\1\24\3\20\1\15\2\16"+
    "\7\20\1\24\1\20\1\24\1\15\1\24\1\17\3\24"+
    "\1\16\1\25\1\26\1\24\1\15\1\16\2\17\17\20"+
    "\1\21\1\20\1\17\1\35\10\20\1\23\2\24\10\20"+
    "\1\24\3\20\1\15\2\16\7\20\1\24\1\20\1\24"+
    "\1\15\1\24\1\17\3\24\1\16\1\25\1\26\1\24"+
    "\1\15\1\16\1\17\1\33\17\20\1\21\1\20\1\17"+
    "\1\35\10\20\1\30\2\24\10\20\1\24\3\20\1\15"+
    "\2\16\7\20\1\24\1\20\1\24\1\15\1\24\1\17"+
    "\3\24\1\16\1\25\1\26\1\24\1\15\1\36\1\37"+
    "\1\40\12\41\1\42\4\41\1\43\1\41\1\37\1\22"+
    "\10\41\1\44\2\15\10\41\1\15\3\41\1\15\2\36"+
    "\7\41\1\15\1\41\3\15\1\37\3\15\1\36\4\15"+
    "\1\36\1\37\1\45\12\41\1\42\4\41\1\43\1\41"+
    "\1\37\1\22\10\41\1\46\2\15\10\41\1\15\3\41"+
    "\1\15\2\36\7\41\1\15\1\41\3\15\1\37\3\15"+
    "\1\36\4\15\1\16\2\17\17\20\1\21\1\20\1\17"+
    "\1\47\2\20\1\50\5\20\1\23\2\24\10\20\1\24"+
    "\3\20\1\15\2\16\7\20\1\24\1\20\1\24\1\51"+
    "\1\24\1\17\3\24\1\16\1\25\1\26\1\24\1\15"+
    "\1\16\1\17\1\52\17\20\1\21\1\20\1\17\1\47"+
    "\2\20\1\50\5\20\1\30\2\24\10\20\1\24\3\20"+
    "\1\15\2\16\7\20\1\24\1\20\1\24\1\51\1\53"+
    "\1\54\3\24\1\16\1\25\1\26\1\24\106\0\1\16"+
    "\55\0\2\16\20\0\1\16\5\0\1\55\1\56\17\55"+
    "\1\0\2\55\1\0\10\55\3\0\10\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\60\1\61\17\60\1\62\2\60\1\0\10\60"+
    "\3\0\10\60\1\0\3\60\3\0\7\60\1\0\1\60"+
    "\3\0\1\60\1\0\1\57\11\0\17\63\1\0\1\63"+
    "\2\0\10\63\3\0\10\63\1\0\3\63\3\0\7\63"+
    "\1\0\1\63\15\0\1\64\5\0\1\65\41\0\1\66"+
    "\15\0\1\67\7\0\1\70\1\71\5\0\1\55\1\72"+
    "\1\73\2\55\1\74\1\75\3\55\1\76\1\77\1\100"+
    "\1\55\1\101\1\102\1\103\1\0\2\55\1\0\1\104"+
    "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\2\0\1\115\2\55\1\116\2\55\1\117\1\120\1\0"+
    "\1\121\1\122\1\55\3\0\1\55\1\123\1\103\1\124"+
    "\3\55\1\0\1\55\3\0\1\55\1\0\1\57\7\0"+
    "\1\64\5\0\1\65\41\0\1\125\15\0\1\67\7\0"+
    "\1\70\1\71\42\0\1\114\47\0\1\55\1\56\1\73"+
    "\2\55\1\74\1\75\3\55\1\76\1\77\1\100\1\55"+
    "\1\101\1\102\1\103\1\0\2\55\1\0\1\126\1\105"+
    "\1\127\1\130\1\110\1\131\1\112\1\132\3\0\1\115"+
    "\2\55\1\116\2\55\1\117\1\120\1\0\1\121\1\122"+
    "\1\55\3\0\1\55\1\123\1\103\1\124\3\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\17\55\1\0\2\55\1\133\10\55\3\0\10\55\1\0"+
    "\3\55\2\133\1\134\7\55\1\0\1\55\3\0\1\55"+
    "\1\0\1\57\7\0\1\60\1\61\6\60\1\135\10\60"+
    "\1\62\2\60\1\0\10\60\3\0\10\60\1\0\3\60"+
    "\3\0\7\60\1\0\1\60\3\0\1\60\1\0\1\57"+
    "\7\0\1\55\1\56\1\73\2\55\1\74\1\75\3\55"+
    "\1\76\1\77\1\100\1\55\1\101\1\102\1\103\1\0"+
    "\2\55\1\133\1\126\1\105\1\127\1\130\1\110\1\131"+
    "\1\112\1\132\3\0\1\115\2\55\1\116\2\55\1\117"+
    "\1\120\1\0\1\121\1\122\1\55\2\133\1\134\1\55"+
    "\1\123\1\103\1\124\3\55\1\0\1\55\3\0\1\55"+
    "\1\0\1\57\7\0\1\60\1\61\17\60\1\62\2\60"+
    "\1\0\10\60\3\0\10\60\1\0\3\60\3\0\7\60"+
    "\1\0\1\60\3\0\1\60\1\15\1\57\7\0\1\55"+
    "\1\56\1\73\2\55\1\74\1\75\3\55\1\76\1\77"+
    "\1\100\1\55\1\101\1\102\1\103\1\0\2\55\1\0"+
    "\1\126\1\105\1\136\1\130\1\110\1\131\1\112\1\132"+
    "\3\0\1\115\2\55\1\116\2\55\1\117\1\120\1\0"+
    "\1\121\1\122\1\55\3\0\1\55\1\123\1\103\1\124"+
    "\3\55\1\0\1\55\3\0\1\55\1\0\1\57\33\0"+
    "\1\15\60\0\1\55\1\56\17\55\1\0\2\55\1\15"+
    "\10\55\3\0\10\55\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\1\137\1\140\3\55\1\141\2\55\1\142\1\143\1\144"+
    "\1\145\1\146\2\55\1\0\2\55\1\0\2\137\6\55"+
    "\3\0\10\55\1\0\3\55\3\0\7\55\1\0\1\55"+
    "\3\0\1\55\1\0\1\57\7\0\21\147\1\0\2\147"+
    "\1\0\10\147\3\0\10\147\1\0\3\147\3\0\7\147"+
    "\1\0\1\147\3\0\1\147\11\0\1\60\1\61\1\150"+
    "\1\151\3\60\1\152\2\60\1\153\1\154\1\155\1\156"+
    "\1\157\2\60\1\62\2\60\1\0\2\150\6\60\3\0"+
    "\10\60\1\0\3\60\3\0\7\60\1\0\1\60\3\0"+
    "\1\60\1\0\1\57\11\0\17\160\1\0\1\160\2\0"+
    "\10\160\3\0\10\160\1\0\3\160\3\0\7\160\1\0"+
    "\1\160\15\0\21\63\1\62\2\63\1\0\10\63\3\0"+
    "\10\63\1\0\3\63\3\0\7\63\1\0\1\63\3\0"+
    "\1\63\24\0\1\161\14\0\1\162\1\163\6\0\1\164"+
    "\2\0\1\163\4\0\1\165\53\0\1\166\1\167\31\0"+
    "\1\167\75\0\1\170\4\0\1\171\32\0\26\172\1\0"+
    "\56\172\2\0\1\55\1\173\1\137\1\140\3\55\1\141"+
    "\2\55\1\142\1\143\1\144\1\145\1\146\2\55\1\0"+
    "\2\55\1\0\2\137\6\55\3\0\10\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\2\55\1\174\5\55\1\175\6\55"+
    "\1\0\2\55\1\0\10\55\3\0\10\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\4\55\1\176\12\55\1\0\2\55"+
    "\1\0\10\55\3\0\10\55\1\0\3\55\3\0\2\55"+
    "\1\175\4\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\12\55\1\175\4\55\1\0\2\55"+
    "\1\0\10\55\3\0\10\55\1\0\3\55\3\0\1\55"+
    "\1\177\5\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\1\175\2\55\1\175\13\55\1\0"+
    "\2\55\1\0\10\55\3\0\10\55\1\0\3\55\3\0"+
    "\7\55\1\0\1\55\3\0\1\55\1\0\1\57\7\0"+
    "\1\55\1\56\17\55\1\0\2\55\1\0\10\55\3\0"+
    "\5\55\1\200\1\201\1\55\1\0\3\55\3\0\7\55"+
    "\1\0\1\55\3\0\1\55\1\0\1\57\7\0\1\55"+
    "\1\56\6\55\1\175\10\55\1\0\2\55\1\0\10\55"+
    "\3\0\10\55\1\0\3\55\3\0\1\55\1\175\5\55"+
    "\1\0\1\55\3\0\1\55\1\0\1\57\7\0\1\55"+
    "\1\56\17\55\1\0\2\55\1\0\10\55\3\0\10\55"+
    "\1\0\3\55\3\0\5\55\1\175\1\55\1\0\1\55"+
    "\3\0\1\55\1\0\1\57\7\0\1\55\1\56\17\55"+
    "\1\0\2\55\1\0\10\55\3\0\10\55\1\0\2\55"+
    "\1\202\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\7\0\1\55\1\56\16\55\1\175\1\0\2\55"+
    "\1\0\10\55\3\0\10\55\1\0\3\55\3\0\7\55"+
    "\1\0\1\55\3\0\1\55\1\0\1\57\7\0\1\55"+
    "\1\56\17\55\1\0\2\55\1\0\2\203\2\55\1\202"+
    "\3\55\3\0\1\204\3\55\1\205\3\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\17\55\1\0\2\55\1\0\4\55"+
    "\1\202\3\55\3\0\10\55\1\0\3\55\3\0\7\55"+
    "\1\0\1\55\3\0\1\55\1\0\1\57\7\0\1\55"+
    "\1\56\17\55\1\0\2\55\1\0\1\206\1\203\2\55"+
    "\1\202\1\55\1\203\1\55\3\0\10\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\17\55\1\0\2\55\1\0\4\55"+
    "\1\203\3\55\3\0\2\205\1\55\1\205\2\55\1\201"+
    "\1\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\4\55\1\202\3\55\3\0\6\55\1\202"+
    "\1\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\1\55\1\207\4\55\1\204\1\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\4\55\1\202\3\55\3\0\2\55\1\204"+
    "\3\55\1\201\1\55\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\17\55\1\0\2\55\1\0\1\55\1\203\4\55\1\204"+
    "\1\55\3\0\10\55\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\45\0\1\210\46\0"+
    "\1\55\1\56\17\55\1\0\2\55\1\0\3\55\1\204"+
    "\4\55\3\0\1\55\1\204\1\55\1\204\2\55\1\201"+
    "\1\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\1\211\2\55\1\205\4\55\3\0\1\204"+
    "\5\55\1\201\1\211\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\17\55\1\0\2\55\1\0\1\201\1\55\1\212\5\55"+
    "\3\0\7\55\1\213\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\17\55\1\0\2\55\1\0\10\55\3\0\7\55\1\212"+
    "\1\0\3\55\3\0\1\175\6\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\10\55\3\0\10\55\1\0\1\55\1\214"+
    "\1\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\7\0\1\55\1\56\12\55\1\175\2\55\1\175"+
    "\1\55\1\0\2\55\1\0\10\55\3\0\10\55\1\0"+
    "\3\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\7\0\1\55\1\56\3\55\2\175\12\55\1\0"+
    "\2\55\1\0\10\55\3\0\10\55\1\0\3\55\3\0"+
    "\2\55\1\175\1\55\1\175\2\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\1\175\16\55"+
    "\1\0\2\55\1\0\10\55\3\0\10\55\1\0\3\55"+
    "\3\0\2\55\1\175\4\55\1\0\1\55\3\0\1\55"+
    "\1\0\1\57\26\0\1\166\1\167\30\0\1\215\1\167"+
    "\32\0\1\55\1\56\17\55\1\0\2\55\1\0\4\55"+
    "\1\202\3\55\3\0\1\204\3\55\1\205\3\55\1\0"+
    "\3\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\7\0\1\55\1\56\17\55\1\0\2\55\1\0"+
    "\1\206\3\55\1\202\3\55\3\0\10\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\17\55\1\0\2\55\1\0\4\55"+
    "\1\202\3\55\3\0\2\205\1\55\1\205\2\55\1\201"+
    "\1\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\1\55\1\212\4\55\1\204\1\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\17\55\1\0"+
    "\2\55\1\0\6\55\1\204\1\55\3\0\10\55\1\0"+
    "\3\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\33\0\1\133\60\0\1\60\1\61\17\60\1\62"+
    "\2\60\1\0\10\60\3\0\10\60\1\0\1\216\2\60"+
    "\3\0\7\60\1\0\1\60\3\0\1\60\1\0\1\57"+
    "\7\0\1\55\1\56\17\55\1\0\2\55\1\0\1\206"+
    "\3\55\1\202\3\55\3\0\7\55\1\217\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\2\55\1\220\5\55\1\221\6\55"+
    "\1\0\2\55\1\0\10\55\3\0\10\55\1\0\3\55"+
    "\3\0\7\55\1\0\1\55\3\0\1\55\1\0\1\57"+
    "\7\0\1\55\1\56\6\55\1\222\10\55\1\0\2\55"+
    "\1\0\10\55\3\0\10\55\1\0\3\55\3\0\7\55"+
    "\1\0\1\55\3\0\1\55\1\0\1\57\7\0\1\55"+
    "\1\56\16\55\1\137\1\0\2\55\1\0\10\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\11\55\1\137"+
    "\5\55\1\0\2\55\1\0\10\55\3\0\10\55\1\0"+
    "\3\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\7\0\1\55\1\56\13\55\1\223\3\55\1\0"+
    "\2\55\1\0\10\55\3\0\10\55\1\0\3\55\3\0"+
    "\7\55\1\0\1\55\3\0\1\55\1\0\1\57\7\0"+
    "\1\55\1\56\15\55\1\142\1\55\1\0\2\55\1\0"+
    "\10\55\3\0\10\55\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\12\55\1\224\4\55\1\0\2\55\1\0\10\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\147\1\225\17\147\1\0"+
    "\2\147\1\0\10\147\3\0\10\147\1\0\3\147\3\0"+
    "\7\147\1\0\1\147\3\0\1\147\11\0\1\60\1\61"+
    "\2\60\1\226\5\60\1\227\6\60\1\62\2\60\1\0"+
    "\10\60\3\0\10\60\1\0\3\60\3\0\7\60\1\0"+
    "\1\60\3\0\1\60\1\0\1\57\7\0\1\60\1\61"+
    "\6\60\1\230\10\60\1\62\2\60\1\0\10\60\3\0"+
    "\10\60\1\0\3\60\3\0\7\60\1\0\1\60\3\0"+
    "\1\60\1\0\1\57\7\0\1\60\1\61\16\60\1\150"+
    "\1\62\2\60\1\0\10\60\3\0\10\60\1\0\3\60"+
    "\3\0\7\60\1\0\1\60\3\0\1\60\1\0\1\57"+
    "\7\0\1\60\1\61\11\60\1\150\5\60\1\62\2\60"+
    "\1\0\10\60\3\0\10\60\1\0\3\60\3\0\7\60"+
    "\1\0\1\60\3\0\1\60\1\0\1\57\7\0\1\60"+
    "\1\61\13\60\1\231\3\60\1\62\2\60\1\0\10\60"+
    "\3\0\10\60\1\0\3\60\3\0\7\60\1\0\1\60"+
    "\3\0\1\60\1\0\1\57\7\0\1\60\1\61\15\60"+
    "\1\153\1\60\1\62\2\60\1\0\10\60\3\0\10\60"+
    "\1\0\3\60\3\0\7\60\1\0\1\60\3\0\1\60"+
    "\1\0\1\57\7\0\1\60\1\61\12\60\1\232\4\60"+
    "\1\62\2\60\1\0\10\60\3\0\10\60\1\0\3\60"+
    "\3\0\7\60\1\0\1\60\3\0\1\60\1\0\1\57"+
    "\7\0\2\160\17\233\1\62\2\233\1\0\10\233\3\0"+
    "\10\233\1\0\3\233\3\0\7\233\1\0\1\233\3\0"+
    "\1\160\24\0\1\234\151\0\1\64\113\0\1\235\44\0"+
    "\1\236\55\0\1\55\1\56\1\137\1\140\3\55\1\141"+
    "\2\55\1\142\1\143\1\144\1\145\1\146\2\55\1\0"+
    "\2\55\1\0\2\137\6\55\1\114\2\0\10\55\1\0"+
    "\3\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\5\0\2\237\1\175\1\240\17\175\1\237\2\175"+
    "\1\15\10\175\3\237\10\175\1\237\3\175\3\237\7\175"+
    "\1\237\1\175\3\237\1\175\1\237\1\241\5\237\26\212"+
    "\1\0\56\212\2\242\1\211\1\243\17\211\1\242\2\211"+
    "\1\244\10\211\3\242\10\211\1\242\3\211\3\245\7\211"+
    "\1\242\1\211\3\242\1\211\1\242\1\246\5\242\67\0"+
    "\1\247\17\0\1\60\1\61\17\60\1\62\2\60\1\0"+
    "\10\60\3\0\10\60\1\250\3\60\3\0\7\60\1\0"+
    "\1\60\3\0\1\60\1\0\1\57\7\0\1\55\1\56"+
    "\3\55\1\251\13\55\1\0\2\55\1\0\10\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\55\1\56\10\55\1\137"+
    "\6\55\1\0\2\55\1\0\10\55\3\0\10\55\1\0"+
    "\3\55\3\0\7\55\1\0\1\55\3\0\1\55\1\0"+
    "\1\57\7\0\1\55\1\56\7\55\1\252\7\55\1\0"+
    "\2\55\1\0\10\55\3\0\10\55\1\0\3\55\3\0"+
    "\7\55\1\0\1\55\3\0\1\55\1\0\1\57\7\0"+
    "\1\55\1\56\12\55\1\137\4\55\1\0\2\55\1\0"+
    "\10\55\3\0\10\55\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\15\55\1\253\1\55\1\0\2\55\1\0\10\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\21\254\1\0\2\254\1\0"+
    "\10\254\3\0\10\254\1\0\3\254\3\0\7\254\1\0"+
    "\1\254\3\0\1\254\11\0\1\60\1\61\3\60\1\255"+
    "\13\60\1\62\2\60\1\0\10\60\3\0\10\60\1\0"+
    "\3\60\3\0\7\60\1\0\1\60\3\0\1\60\1\0"+
    "\1\57\7\0\1\60\1\61\10\60\1\150\6\60\1\62"+
    "\2\60\1\0\10\60\3\0\10\60\1\0\3\60\3\0"+
    "\7\60\1\0\1\60\3\0\1\60\1\0\1\57\7\0"+
    "\1\60\1\61\7\60\1\256\7\60\1\62\2\60\1\0"+
    "\10\60\3\0\10\60\1\0\3\60\3\0\7\60\1\0"+
    "\1\60\3\0\1\60\1\0\1\57\7\0\1\60\1\61"+
    "\12\60\1\150\4\60\1\62\2\60\1\0\10\60\3\0"+
    "\10\60\1\0\3\60\3\0\7\60\1\0\1\60\3\0"+
    "\1\60\1\0\1\57\7\0\1\60\1\61\15\60\1\257"+
    "\1\60\1\62\2\60\1\0\10\60\3\0\10\60\1\0"+
    "\3\60\3\0\7\60\1\0\1\60\3\0\1\60\1\0"+
    "\1\57\54\0\1\161\56\0\1\260\63\0\26\237\1\15"+
    "\60\237\1\175\1\240\1\261\1\262\3\175\1\263\2\175"+
    "\1\264\1\265\1\266\1\267\1\270\2\175\1\237\2\175"+
    "\1\15\2\261\6\175\3\237\10\175\1\237\3\175\3\237"+
    "\7\175\1\237\1\175\3\237\1\175\1\237\1\241\7\237"+
    "\21\271\1\237\2\271\1\15\10\271\3\237\10\271\1\237"+
    "\3\271\3\237\7\271\1\237\1\271\3\237\1\271\7\237"+
    "\26\242\1\244\27\242\3\245\26\242\1\211\1\243\1\272"+
    "\1\273\3\211\1\274\2\211\1\275\1\276\1\277\1\300"+
    "\1\301\2\211\1\242\2\211\1\244\2\272\6\211\3\242"+
    "\10\211\1\242\3\211\3\245\7\211\1\242\1\211\3\242"+
    "\1\211\1\242\1\246\7\242\21\302\1\242\2\302\1\244"+
    "\10\302\3\242\10\302\1\242\3\302\3\245\7\302\1\242"+
    "\1\302\3\242\1\302\7\242\26\303\1\0\56\303\2\0"+
    "\1\55\1\56\4\55\1\137\12\55\1\0\2\55\1\0"+
    "\10\55\3\0\10\55\1\0\3\55\3\0\7\55\1\0"+
    "\1\55\3\0\1\55\1\0\1\57\7\0\1\55\1\56"+
    "\6\55\1\137\10\55\1\0\2\55\1\0\10\55\3\0"+
    "\10\55\1\0\3\55\3\0\7\55\1\0\1\55\3\0"+
    "\1\55\1\0\1\57\7\0\1\60\1\61\4\60\1\150"+
    "\12\60\1\62\2\60\1\0\10\60\3\0\10\60\1\0"+
    "\3\60\3\0\7\60\1\0\1\60\3\0\1\60\1\0"+
    "\1\57\7\0\1\60\1\61\6\60\1\150\10\60\1\62"+
    "\2\60\1\0\10\60\3\0\10\60\1\0\3\60\3\0"+
    "\7\60\1\0\1\60\3\0\1\60\1\0\1\57\5\0"+
    "\2\237\1\175\1\240\2\175\1\304\5\175\1\305\6\175"+
    "\1\237\2\175\1\15\10\175\3\237\10\175\1\237\3\175"+
    "\3\237\7\175\1\237\1\175\3\237\1\175\1\237\1\241"+
    "\7\237\1\175\1\240\6\175\1\306\10\175\1\237\2\175"+
    "\1\15\10\175\3\237\10\175\1\237\3\175\3\237\7\175"+
    "\1\237\1\175\3\237\1\175\1\237\1\241\7\237\1\175"+
    "\1\240\16\175\1\261\1\237\2\175\1\15\10\175\3\237"+
    "\10\175\1\237\3\175\3\237\7\175\1\237\1\175\3\237"+
    "\1\175\1\237\1\241\7\237\1\175\1\240\11\175\1\261"+
    "\5\175\1\237\2\175\1\15\10\175\3\237\10\175\1\237"+
    "\3\175\3\237\7\175\1\237\1\175\3\237\1\175\1\237"+
    "\1\241\7\237\1\175\1\240\13\175\1\307\3\175\1\237"+
    "\2\175\1\15\10\175\3\237\10\175\1\237\3\175\3\237"+
    "\7\175\1\237\1\175\3\237\1\175\1\237\1\241\7\237"+
    "\1\175\1\240\15\175\1\264\1\175\1\237\2\175\1\15"+
    "\10\175\3\237\10\175\1\237\3\175\3\237\7\175\1\237"+
    "\1\175\3\237\1\175\1\237\1\241\7\237\1\175\1\240"+
    "\12\175\1\310\4\175\1\237\2\175\1\15\10\175\3\237"+
    "\10\175\1\237\3\175\3\237\7\175\1\237\1\175\3\237"+
    "\1\175\1\237\1\241\7\237\1\271\1\311\17\271\1\237"+
    "\2\271\1\15\10\271\3\237\10\271\1\237\3\271\3\237"+
    "\7\271\1\237\1\271\3\237\1\271\7\237\2\242\1\211"+
    "\1\243\2\211\1\312\5\211\1\313\6\211\1\242\2\211"+
    "\1\244\10\211\3\242\10\211\1\242\3\211\3\245\7\211"+
    "\1\242\1\211\3\242\1\211\1\242\1\246\7\242\1\211"+
    "\1\243\6\211\1\314\10\211\1\242\2\211\1\244\10\211"+
    "\3\242\10\211\1\242\3\211\3\245\7\211\1\242\1\211"+
    "\3\242\1\211\1\242\1\246\7\242\1\211\1\243\16\211"+
    "\1\272\1\242\2\211\1\244\10\211\3\242\10\211\1\242"+
    "\3\211\3\245\7\211\1\242\1\211\3\242\1\211\1\242"+
    "\1\246\7\242\1\211\1\243\11\211\1\272\5\211\1\242"+
    "\2\211\1\244\10\211\3\242\10\211\1\242\3\211\3\245"+
    "\7\211\1\242\1\211\3\242\1\211\1\242\1\246\7\242"+
    "\1\211\1\243\13\211\1\315\3\211\1\242\2\211\1\244"+
    "\10\211\3\242\10\211\1\242\3\211\3\245\7\211\1\242"+
    "\1\211\3\242\1\211\1\242\1\246\7\242\1\211\1\243"+
    "\15\211\1\275\1\211\1\242\2\211\1\244\10\211\3\242"+
    "\10\211\1\242\3\211\3\245\7\211\1\242\1\211\3\242"+
    "\1\211\1\242\1\246\7\242\1\211\1\243\12\211\1\316"+
    "\4\211\1\242\2\211\1\244\10\211\3\242\10\211\1\242"+
    "\3\211\3\245\7\211\1\242\1\211\3\242\1\211\1\242"+
    "\1\246\7\242\1\302\1\317\17\302\1\242\2\302\1\244"+
    "\10\302\3\242\10\302\1\242\3\302\3\245\7\302\1\242"+
    "\1\302\3\242\1\302\7\242\72\0\1\320\12\0\2\237"+
    "\1\175\1\240\3\175\1\321\13\175\1\237\2\175\1\15"+
    "\10\175\3\237\10\175\1\237\3\175\3\237\7\175\1\237"+
    "\1\175\3\237\1\175\1\237\1\241\7\237\1\175\1\240"+
    "\10\175\1\261\6\175\1\237\2\175\1\15\10\175\3\237"+
    "\10\175\1\237\3\175\3\237\7\175\1\237\1\175\3\237"+
    "\1\175\1\237\1\241\7\237\1\175\1\240\7\175\1\322"+
    "\7\175\1\237\2\175\1\15\10\175\3\237\10\175\1\237"+
    "\3\175\3\237\7\175\1\237\1\175\3\237\1\175\1\237"+
    "\1\241\7\237\1\175\1\240\12\175\1\261\4\175\1\237"+
    "\2\175\1\15\10\175\3\237\10\175\1\237\3\175\3\237"+
    "\7\175\1\237\1\175\3\237\1\175\1\237\1\241\7\237"+
    "\1\175\1\240\15\175\1\323\1\175\1\237\2\175\1\15"+
    "\10\175\3\237\10\175\1\237\3\175\3\237\7\175\1\237"+
    "\1\175\3\237\1\175\1\237\1\241\7\237\21\324\1\237"+
    "\2\324\1\15\10\324\3\237\10\324\1\237\3\324\3\237"+
    "\7\324\1\237\1\324\3\237\1\324\7\237\2\242\1\211"+
    "\1\243\3\211\1\325\13\211\1\242\2\211\1\244\10\211"+
    "\3\242\10\211\1\242\3\211\3\245\7\211\1\242\1\211"+
    "\3\242\1\211\1\242\1\246\7\242\1\211\1\243\10\211"+
    "\1\272\6\211\1\242\2\211\1\244\10\211\3\242\10\211"+
    "\1\242\3\211\3\245\7\211\1\242\1\211\3\242\1\211"+
    "\1\242\1\246\7\242\1\211\1\243\7\211\1\326\7\211"+
    "\1\242\2\211\1\244\10\211\3\242\10\211\1\242\3\211"+
    "\3\245\7\211\1\242\1\211\3\242\1\211\1\242\1\246"+
    "\7\242\1\211\1\243\12\211\1\272\4\211\1\242\2\211"+
    "\1\244\10\211\3\242\10\211\1\242\3\211\3\245\7\211"+
    "\1\242\1\211\3\242\1\211\1\242\1\246\7\242\1\211"+
    "\1\243\15\211\1\327\1\211\1\242\2\211\1\244\10\211"+
    "\3\242\10\211\1\242\3\211\3\245\7\211\1\242\1\211"+
    "\3\242\1\211\1\242\1\246\7\242\21\330\1\242\2\330"+
    "\1\244\10\330\3\242\10\330\1\242\3\330\3\245\7\330"+
    "\1\242\1\330\3\242\1\330\7\242\2\237\1\175\1\240"+
    "\4\175\1\261\12\175\1\237\2\175\1\15\10\175\3\237"+
    "\10\175\1\237\3\175\3\237\7\175\1\237\1\175\3\237"+
    "\1\175\1\237\1\241\7\237\1\175\1\240\6\175\1\261"+
    "\10\175\1\237\2\175\1\15\10\175\3\237\10\175\1\237"+
    "\3\175\3\237\7\175\1\237\1\175\3\237\1\175\1\237"+
    "\1\241\5\237\2\242\1\211\1\243\4\211\1\272\12\211"+
    "\1\242\2\211\1\244\10\211\3\242\10\211\1\242\3\211"+
    "\3\245\7\211\1\242\1\211\3\242\1\211\1\242\1\246"+
    "\7\242\1\211\1\243\6\211\1\272\10\211\1\242\2\211"+
    "\1\244\10\211\3\242\10\211\1\242\3\211\3\245\7\211"+
    "\1\242\1\211\3\242\1\211\1\242\1\246\5\242";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10833];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\4\1\1\11\1\1\3\11\3\1\1\11"+
    "\1\1\2\11\2\1\1\3\4\1\1\3\1\1\1\11"+
    "\1\1\1\11\3\1\7\0\1\11\4\0\1\11\15\0"+
    "\2\1\2\0\1\1\1\0\1\1\12\0\1\1\1\0"+
    "\1\1\1\15\1\5\2\0\2\1\2\0\2\1\1\0"+
    "\1\1\1\0\2\1\2\0\2\1\1\0\1\1\1\0"+
    "\4\11\3\0\1\11\1\0\1\11\1\0\1\1\1\0"+
    "\12\1\1\11\1\2\3\1\2\0\1\1\13\0\1\1"+
    "\1\0\1\11\4\0\2\2\1\15\1\7\1\2\4\0"+
    "\2\1\2\0\1\1\1\11\2\1\2\0\2\1\1\0"+
    "\1\1\1\0\2\3\2\2\2\3\1\2\1\3\1\2"+
    "\7\0\6\2\1\11\2\0\2\1\2\2\2\3";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  String urlPrefix = System.getProperty("urlPrefix");
  char tab;
  boolean p = false;
  Writer out;
  private HashMap<String, HashMap<Integer, String>> defs = null;
  public void setDefs(HashMap<String, HashMap<Integer, String>> defs) {
  	this.defs = defs;
  }

  public void setURL(String urlPrefix) {
    this.urlPrefix = urlPrefix;
  }

  public void reInit(char[] buf, int len) {
  	yyreset((Reader) null);
  	zzBuffer = buf;
  	zzEndRead = len;
	zzAtEOF = true;
	zzStartRead = 0;
  }

  public void write(Writer out) throws IOException {
  	this.out = out;
	while(yylex() != YYEOF) {
	}
  }
  public int getLine() {
  	return yyline-2;
  }

  public static void main(String argv[]) {
    if (argv.length <= 1) {
      System.out.println("Usage : java TroffXref <inputfile> <outfile>");
    } else {
      Date start = new Date();
      TroffXref scanner = null;
      try {
          scanner = new TroffXref( new BufferedReader(new java.io.FileReader(argv[0])));
	  BufferedWriter out = new BufferedWriter(new java.io.FileWriter(argv[1]));
	  out.write("<html><head><style>a{text-decoration:none;color:#444499;} div{padding:0.5em} .I{color:#000099;} .K{color:#000000; font-weight:bold;} .c{color:grey;} .s{color:green;} .d{color:#909; font-weight:bold; font-style:italic;} .f{color:#909;} .mf{color:#909;}</style></head><body>");
	  scanner.write(out);
	  out.write("</body></html>");
	  out.close();
      }
      catch (Exception e) {
        System.out.println(e);
        e.printStackTrace();
      }
      long span =  ((new Date()).getTime() - start.getTime());
      System.err.println("took: "+ span + " msec");
     }
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TroffXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TroffXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { out.write( "&lt;");
          }
        case 37: break;
        case 17: 
          { out.write("<a href=\""+urlPrefix+"path=");
	out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
	out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 38: break;
        case 32: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 39: break;
        case 3: 
          { out.write(yycharat(0));
          }
        case 40: break;
        case 14: 
          { if(p) 
        out.write("</p>");
    out.write("<p>");
    p = true;
          }
        case 41: break;
        case 7: 
          { yybegin(YYINITIAL);out.write("</div>");
          }
        case 42: break;
        case 24: 
          { out.write(".so ");
          }
        case 43: break;
        case 11: 
          { out.write("</td><td>");
          }
        case 44: break;
        case 26: 
          { out.write("</pre>");
          }
        case 45: break;
        case 10: 
          { out.write("</td></tr><tr><td>");
          }
        case 46: break;
        case 34: 
          { for(int mi = zzStartRead; mi < zzMarkedPos; mi++) {
			if(zzBuffer[mi] != '@') {
				out.write(zzBuffer[mi]);
			} else {
				out.write(" (at] ");
			}
		}
		//out.write("<a href=\"mailto:");
		//out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
		//out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 47: break;
        case 36: 
          { tab = yycharat(4);
          }
        case 48: break;
        case 33: 
          { out.write('"');
          }
        case 49: break;
        case 6: 
          { out.write( "&gt;");
          }
        case 50: break;
        case 16: 
          { yybegin(TBLL);
          }
        case 51: break;
        case 15: 
          { yybegin(BOLD); out.write("<span class=\"b\">");
          }
        case 52: break;
        case 27: 
          { yybegin(BOLD); out.write("<span class=\"k\">");
          }
        case 53: break;
        case 13: 
          { yybegin(BOLD); out.write("<span class=\"s\">");
          }
        case 54: break;
        case 25: 
          { out.write("<pre>");
          }
        case 55: break;
        case 21: 
          { out.write("<span class=\"b\">");
          }
        case 56: break;
        case 18: 
          { out.write("<span class=\"k\">");
          }
        case 57: break;
        case 35: 
          { out.write(" TM ");
          }
        case 58: break;
        case 30: 
          { yybegin(COMMENT);out.write("<span class=\"c\">");
          }
        case 59: break;
        case 2: 
          { out.write(' ');
          }
        case 60: break;
        case 19: 
          { out.write("<span class=\"s\">");
          }
        case 61: break;
        case 8: 
          { yybegin(YYINITIAL);out.write("</span><br>");
          }
        case 62: break;
        case 31: 
          { yybegin(YYINITIAL); out.write("</td></tr></table>");
          }
        case 63: break;
        case 4: 
          { out.write("\n");
          }
        case 64: break;
        case 22: 
          { out.write(" (R) ");
          }
        case 65: break;
        case 20: 
          { out.write("</span>");
          }
        case 66: break;
        case 29: 
          { yybegin(TBL);out.write("<table border=\"1\" cellpadding=\"2\" rules=\"all\" bgcolor=\"#ddddcc\"><tr><td>");
          }
        case 67: break;
        case 28: 
          { yybegin(HEADER);out.write("<div class=\"b\">");
          }
        case 68: break;
        case 9: 
          { yybegin(YYINITIAL);out.write("</span> ");
          }
        case 69: break;
        case 23: 
          { out.write( zzBuffer[zzMarkedPos-1]);
          }
        case 70: break;
        case 12: 
          { out.write('-');
          }
        case 71: break;
        case 1: 
          { 
          }
        case 72: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
