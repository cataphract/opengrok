/* The following code was generated by JFlex 1.4.1 on 3/28/06 11:23 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

/*
 * ident	"%Z%%M% %I%     %E% SMI"
 */

package org.opensolaris.opengrok.analysis.plain;
import java.util.*;
import java.io.*;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/28/06 11:23 PM from the specification file
 * <tt>/home/cb117521/prj/opengrok-0.3.1/src/org/opensolaris/opengrok/analysis/plain/XMLXref.lex</tt>
 */
public class XMLXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int SSTRING = 4;
  public static final int COMMENT = 3;
  public static final int TAG = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\27\1\0\2\1\22\0\1\1\1\11\1\14\1\30"+
    "\2\2\1\26\1\15\2\30\3\2\1\12\1\5\1\7\12\3\1\24"+
    "\1\2\1\10\1\13\1\16\1\2\1\25\5\6\1\23\1\6\1\17"+
    "\7\6\1\21\2\6\1\22\1\20\6\6\1\30\1\2\2\30\1\4"+
    "\1\30\5\6\1\23\1\6\1\17\7\6\1\21\2\6\1\22\1\20"+
    "\6\6\3\30\1\2\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\3\2\1\3\2\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\6\1\13\1\14\1\15"+
    "\1\2\1\16\12\0\1\17\2\6\1\0\1\20\2\0"+
    "\1\21\5\0\2\6\1\22\1\21\1\0\1\23\2\0"+
    "\1\6\1\24\3\0\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\175\0\226"+
    "\0\257\0\310\0\341\0\372\0\175\0\175\0\u0113\0\175"+
    "\0\175\0\175\0\175\0\u012c\0\u0145\0\175\0\u015e\0\175"+
    "\0\u0177\0\u0190\0\226\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d"+
    "\0\u0226\0\u023f\0\u0258\0\u0271\0\175\0\u028a\0\u02a3\0\u015e"+
    "\0\175\0\u02bc\0\u0190\0\u02d5\0\u02ee\0\u0307\0\u0320\0\u0339"+
    "\0\u0352\0\u036b\0\u0384\0\175\0\u02ee\0\u039d\0\175\0\u03b6"+
    "\0\u03cf\0\u03e8\0\u039d\0\u0401\0\u041a\0\u0433\0\u0433";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\4\10\1\11\1\12\1\7\1\10\4\7"+
    "\1\13\3\10\1\14\2\7\1\15\1\16\1\7\1\6"+
    "\2\7\2\17\1\10\1\17\1\11\1\20\1\7\1\10"+
    "\1\7\1\21\1\22\1\23\1\24\3\17\1\25\2\7"+
    "\1\15\1\16\1\7\1\6\2\7\4\10\1\11\1\26"+
    "\1\7\1\10\1\7\1\27\1\7\1\30\1\13\3\10"+
    "\1\14\2\7\1\15\1\16\1\7\1\6\2\7\4\10"+
    "\1\11\1\26\1\7\1\31\3\7\1\30\1\13\3\10"+
    "\1\14\2\7\1\15\1\16\1\7\1\6\2\7\4\10"+
    "\1\11\2\7\1\10\2\7\1\32\1\7\1\13\3\10"+
    "\1\14\2\7\1\15\1\16\1\7\34\0\2\33\1\34"+
    "\1\33\1\35\2\0\1\33\4\0\5\33\1\0\1\36"+
    "\6\0\4\37\1\40\2\0\1\37\4\0\5\37\1\0"+
    "\1\36\14\0\1\41\22\0\2\33\1\34\1\33\1\35"+
    "\2\0\1\33\4\0\1\33\1\42\3\33\1\0\1\36"+
    "\6\0\2\33\1\34\1\33\1\35\2\0\1\33\4\0"+
    "\1\33\1\43\3\33\1\0\1\36\4\0\1\44\1\0"+
    "\2\17\1\34\1\17\1\35\2\0\1\33\1\45\3\0"+
    "\5\17\1\0\1\36\4\0\1\44\1\0\2\17\1\34"+
    "\1\17\1\35\2\0\1\33\1\45\3\0\1\17\1\46"+
    "\3\17\1\0\1\36\4\0\1\44\1\0\2\17\1\34"+
    "\1\17\1\35\2\0\1\33\1\45\3\0\1\17\1\47"+
    "\3\17\1\0\1\36\4\0\1\50\12\0\1\51\17\0"+
    "\2\33\1\34\1\33\1\35\2\0\1\52\4\0\5\33"+
    "\1\0\1\36\4\0\1\53\13\0\1\51\16\0\2\33"+
    "\1\34\1\54\1\35\2\0\1\33\4\0\5\54\1\0"+
    "\1\36\6\0\4\55\1\40\2\0\1\55\4\0\5\55"+
    "\1\0\1\36\6\0\5\56\2\0\1\56\4\0\5\56"+
    "\10\0\4\37\1\35\2\0\1\37\4\0\5\37\1\0"+
    "\1\36\6\0\5\40\2\0\1\40\4\0\5\40\1\0"+
    "\1\36\15\0\1\57\21\0\2\33\1\34\1\33\1\35"+
    "\2\0\1\33\4\0\1\33\1\60\3\33\1\0\1\36"+
    "\6\0\2\33\1\34\1\33\1\35\2\0\1\33\4\0"+
    "\2\33\1\61\2\33\1\0\1\36\4\0\1\44\11\0"+
    "\1\45\16\0\1\44\1\0\2\17\1\34\1\17\1\35"+
    "\2\0\1\33\1\45\3\0\1\17\1\62\3\17\1\0"+
    "\1\36\4\0\1\44\1\0\2\17\1\34\1\17\1\35"+
    "\2\0\1\33\1\45\3\0\2\17\1\63\2\17\1\0"+
    "\1\36\6\0\2\33\1\34\1\33\1\35\2\0\1\33"+
    "\3\0\1\64\5\33\1\0\1\36\6\0\4\54\1\35"+
    "\2\0\1\54\4\0\5\54\1\0\1\36\6\0\1\65"+
    "\2\55\1\65\1\35\2\0\1\55\4\0\5\65\1\0"+
    "\1\36\6\0\2\56\1\66\2\56\2\0\1\56\4\0"+
    "\5\56\17\0\1\67\21\0\2\33\1\34\1\33\1\35"+
    "\2\0\1\33\4\0\2\33\1\70\2\33\1\0\1\36"+
    "\6\0\2\33\1\34\1\33\1\35\2\0\1\33\4\0"+
    "\5\33\1\71\1\36\4\0\1\44\1\0\2\17\1\34"+
    "\1\17\1\35\2\0\1\33\1\45\3\0\2\17\1\72"+
    "\2\17\1\0\1\36\4\0\1\44\1\0\2\17\1\34"+
    "\1\17\1\35\2\0\1\33\1\45\3\0\5\17\1\71"+
    "\1\36\6\0\5\73\2\0\1\73\4\0\5\73\10\0"+
    "\2\33\1\34\1\33\1\35\2\0\1\33\4\0\3\33"+
    "\1\61\1\33\1\71\1\36\12\0\1\74\22\0\1\44"+
    "\1\0\2\17\1\34\1\17\1\35\2\0\1\33\1\45"+
    "\3\0\3\17\1\63\1\17\1\71\1\36\12\0\1\75"+
    "\23\0\6\76\1\0\3\76\3\0\10\76\4\0\1\76"+
    "\1\77\2\76\2\77\1\0\3\76\3\0\5\77\3\76"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\5\1\2\11\1\1\4\11\2\1\1\11"+
    "\1\1\1\11\2\1\12\0\1\11\2\1\1\0\1\11"+
    "\2\0\1\1\5\0\2\1\1\11\1\1\1\0\1\11"+
    "\2\0\2\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  Writer out;
  String urlPrefix = System.getProperty("urlPrefix");
  public void write(Writer out) throws IOException {
  	this.out = out;
	yyline = 2;
	out.write("<a class=\"l\" name=\"1\">      1 </a>");
	while(yylex() != YYEOF);
  }
  public void reInit(char[] buf, int len) {
  	yyreset((Reader) null);
  	zzBuffer = buf;
  	zzEndRead = len;
	zzAtEOF = true;
	zzStartRead = 0;
  }

  public int getLine() {
  	return yyline - 2;
  }

  public static void main(String argv[]) {
    if (argv.length <= 1) {
      System.out.println("Usage : java Xref <inputfile> <outfile>");
    }
    else {
      Date start = new Date();
      XMLXref scanner = null;
      try {
          scanner = new XMLXref( new BufferedReader(new java.io.FileReader(argv[0])));
	  BufferedWriter out = new BufferedWriter(new java.io.FileWriter(argv[1]));
	  out.write("<html><head><style>.I{color:#000099;} .K{color:#000000; font-weight:bold;} .N{color:brown;} .c{color:grey;} .s{color:green;} .l{color: #666699; text-decoration:none; font-weight:normal;background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;}  .hl{color:#666;font-weight:bold; text-decoration:none; background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;}</style></head><body><pre>");
	  scanner.write(out);
	  out.write("</pre></body></html>");
	  out.close();
      }
      catch (Exception e) {
        System.out.println(e);
        e.printStackTrace();
      }
      long span =  ((new Date()).getTime() - start.getTime());
      System.err.println("took: "+ span + " msec");
     }
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XMLXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public XMLXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { yybegin(YYINITIAL); out.write("&lt;");
          }
        case 22: break;
        case 2: 
          { out.write(yycharat(0));
          }
        case 23: break;
        case 12: 
          { yybegin(TAG); out.write("\"</span>");
          }
        case 24: break;
        case 14: 
          { yybegin(TAG); out.write("'</span>");
          }
        case 25: break;
        case 8: 
          { yybegin(STRING); out.write("<span class=\"s\">\"");
          }
        case 26: break;
        case 15: 
          { out.write("<b>"); out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead); out.write("</b>");
          }
        case 27: break;
        case 10: 
          { yybegin(YYINITIAL); out.write("&gt;");
          }
        case 28: break;
        case 9: 
          { yybegin(SSTRING); out.write("<span class=\"s\">'");
          }
        case 29: break;
        case 4: 
          { out.write( "&amp;");
          }
        case 30: break;
        case 11: 
          { out.write( "&lt;");
          }
        case 31: break;
        case 18: 
          { yybegin(YYINITIAL); out.write("--&gt;</span>");
          }
        case 32: break;
        case 19: 
          { yybegin(COMMENT); out.write("<span class=\"c\">&lt;!--");
          }
        case 33: break;
        case 6: 
          { out.write("<span class=\"n\">"); out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead); out.write("</span>");
          }
        case 34: break;
        case 21: 
          { String s=yytext();
	 out.write("<a href=\"");
	 out.write(s);out.write("\">");
	 out.write(s);out.write("</a>");
          }
        case 35: break;
        case 13: 
          { out.write( "&gt;");
          }
        case 36: break;
        case 3: 
          { yybegin(TAG); out.write("&lt;");
          }
        case 37: break;
        case 20: 
          { for(int mi = zzStartRead; mi < zzMarkedPos; mi++) {
			if(zzBuffer[mi] != '@') {
				out.write(zzBuffer[mi]);
			} else {
				out.write(" (a] ");
			}
		}
/*		String s=yytext();
		out.write("<a href=\"mailto:");
		out.write(s);out.write("\">");
		out.write(s);out.write("</a>");*/
          }
        case 38: break;
        case 17: 
          { String s=yytext();
	out.write("<a href=\"");out.write(urlPrefix);out.write("path=");
	out.write(s);out.write("\">");
	out.write(s);out.write("</a>");
          }
        case 39: break;
        case 16: 
          { out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
          }
        case 40: break;
        case 1: 
          { 
          }
        case 41: break;
        case 5: 
          { Util.readableLine(yyline, out);
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
