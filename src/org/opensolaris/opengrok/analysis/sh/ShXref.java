/* The following code was generated by JFlex 1.4.1 on 3/28/06 11:23 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

/*
 * ident	"%Z%%M% %I%     %E% SMI"
 */

package org.opensolaris.opengrok.analysis.sh;
import java.util.*;
import java.io.*;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/28/06 11:23 PM from the specification file
 * <tt>/home/cb117521/prj/opengrok-0.3.1/src/org/opensolaris/opengrok/analysis/sh/ShXref.lex</tt>
 */
public class ShXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int SCOMMENT = 3;
  public static final int QSTRING = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\5\1\0\2\1\22\0\1\1\1\11\1\16\1\20"+
    "\1\4\1\11\1\22\1\17\2\25\3\11\1\13\1\14\1\15\1\6"+
    "\11\3\1\33\1\11\1\23\1\11\1\24\1\11\1\34\5\10\1\32"+
    "\1\2\1\26\7\2\1\30\2\2\1\31\1\27\3\2\1\7\2\2"+
    "\1\25\1\21\2\25\1\12\1\25\5\10\1\32\1\2\1\26\7\2"+
    "\1\30\2\2\1\31\1\27\3\2\1\7\2\2\3\25\1\11\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\3\1\5\1\4"+
    "\4\3\1\6\1\7\1\10\1\11\1\12\1\13\3\3"+
    "\1\14\3\3\1\15\1\16\1\3\1\17\7\0\1\4"+
    "\1\0\1\17\12\0\1\2\1\20\1\21\3\0\1\22"+
    "\1\23\1\0\1\4\1\23\1\17\1\4\1\23\1\0"+
    "\1\23\1\24\2\0\1\25\3\0\1\26\3\0\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\72\0\221\0\256"+
    "\0\313\0\350\0\72\0\u0105\0\72\0\u0122\0\u013f\0\u015c"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u0179\0\u0196"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\72\0\u0244\0\u0261"+
    "\0\256\0\u027e\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c"+
    "\0\u02d5\0\u0349\0\u0122\0\u013f\0\u0366\0\u0383\0\u0179\0\u03a0"+
    "\0\u03bd\0\u0196\0\u03da\0\u03f7\0\u01d0\0\72\0\72\0\72"+
    "\0\u0414\0\u0431\0\u0244\0\72\0\u029b\0\u044e\0\u02f2\0\u0366"+
    "\0\u032c\0\u0349\0\u03a0\0\u046b\0\u03da\0\u03f7\0\u0488\0\u04a5"+
    "\0\u044e\0\u04c2\0\u04df\0\u04fc\0\u04c2\0\u0519\0\u0536\0\u0553"+
    "\0\u0553";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\10"+
    "\1\15\1\16\2\17\1\20\1\21\1\22\1\23\1\15"+
    "\1\24\1\25\1\26\1\15\5\10\2\15\1\6\1\7"+
    "\1\27\1\30\1\31\1\13\1\30\2\27\1\15\3\30"+
    "\1\20\1\32\2\15\1\33\1\24\1\25\1\26\1\15"+
    "\1\34\3\27\1\35\2\15\35\0\1\6\1\7\1\27"+
    "\1\30\1\15\1\36\1\30\2\27\1\15\3\30\1\20"+
    "\4\15\1\24\1\25\1\26\1\15\1\34\3\27\1\35"+
    "\2\15\1\6\1\7\1\27\1\30\1\15\1\13\1\30"+
    "\2\27\1\15\3\30\1\20\1\15\1\37\1\15\1\40"+
    "\1\24\1\25\1\26\1\15\1\34\3\27\1\35\2\15"+
    "\1\0\1\7\35\0\2\41\2\0\3\41\1\0\1\41"+
    "\1\42\1\43\1\44\10\0\5\41\2\0\2\45\1\46"+
    "\1\11\1\45\1\0\1\11\2\46\1\45\2\46\1\47"+
    "\11\45\5\46\2\45\2\0\1\50\1\51\2\0\1\51"+
    "\2\50\1\0\1\50\13\0\5\50\2\0\2\45\1\46"+
    "\1\11\1\45\1\0\1\11\1\52\1\46\1\45\2\46"+
    "\1\47\11\45\5\46\2\45\2\0\2\53\2\0\3\53"+
    "\1\0\1\53\1\54\1\55\11\0\5\53\4\0\2\54"+
    "\2\0\3\54\1\0\2\54\1\55\11\0\5\54\4\0"+
    "\1\56\4\0\2\56\15\0\5\56\4\0\2\57\2\0"+
    "\3\57\1\0\2\57\1\60\1\44\10\0\5\57\1\0"+
    "\1\61\2\0\2\62\2\0\3\62\1\0\2\62\1\63"+
    "\11\0\5\62\1\0\1\61\2\0\1\64\4\0\2\64"+
    "\1\0\1\64\13\0\5\64\3\0\1\65\14\0\1\66"+
    "\34\0\1\67\2\0\1\70\15\0\2\57\2\0\3\57"+
    "\1\0\2\57\1\60\1\44\10\0\1\57\1\71\3\57"+
    "\1\0\1\61\2\0\2\57\2\0\3\57\1\0\2\57"+
    "\1\60\1\44\10\0\1\57\1\72\3\57\1\0\1\61"+
    "\1\0\1\73\15\0\1\66\34\0\1\74\17\0\2\42"+
    "\2\0\3\42\1\0\2\42\1\43\1\44\10\0\5\42"+
    "\4\0\1\75\1\42\2\0\1\42\2\75\1\0\2\42"+
    "\1\43\1\44\10\0\5\75\4\0\1\76\4\0\2\76"+
    "\15\0\5\76\5\0\1\51\2\0\1\51\30\0\1\54"+
    "\1\77\2\0\1\77\2\54\1\0\2\54\1\55\11\0"+
    "\5\54\4\0\1\100\1\77\2\0\1\77\2\100\1\0"+
    "\2\54\1\55\11\0\5\100\4\0\2\101\2\0\3\101"+
    "\1\0\1\101\13\0\5\101\4\0\1\54\1\102\2\0"+
    "\1\102\1\54\1\102\1\0\2\54\1\55\11\0\4\54"+
    "\1\102\4\0\1\100\1\54\2\0\1\54\2\100\1\0"+
    "\2\54\1\55\11\0\5\100\4\0\2\56\2\0\3\56"+
    "\1\0\3\56\1\44\10\0\5\56\4\0\1\103\1\57"+
    "\2\0\1\57\2\103\1\0\2\57\1\60\1\44\10\0"+
    "\5\103\1\0\1\61\2\0\2\104\2\0\3\104\1\0"+
    "\3\104\11\0\5\104\4\0\1\105\1\62\2\0\1\62"+
    "\2\105\1\0\2\62\1\63\11\0\5\105\1\0\1\61"+
    "\2\0\2\106\2\0\3\106\1\0\1\106\13\0\5\106"+
    "\4\0\2\57\2\0\3\57\1\0\2\57\1\60\1\44"+
    "\10\0\1\57\1\107\3\57\1\0\1\61\2\0\2\57"+
    "\2\0\3\57\1\0\2\57\1\60\1\44\10\0\2\57"+
    "\1\110\2\57\1\0\1\61\2\0\2\111\2\0\3\111"+
    "\1\0\3\76\1\44\10\0\5\111\4\0\2\104\2\0"+
    "\3\104\1\0\2\104\1\112\11\0\5\104\4\0\2\57"+
    "\2\0\3\57\1\0\2\57\1\60\1\44\10\0\2\57"+
    "\1\113\2\57\1\0\1\61\2\0\2\57\2\0\3\57"+
    "\1\0\2\57\1\60\1\44\10\0\5\57\1\114\1\61"+
    "\2\0\2\115\2\0\3\115\1\0\3\115\11\0\5\115"+
    "\4\0\2\57\2\0\3\57\1\0\2\57\1\60\1\44"+
    "\10\0\3\57\1\110\1\57\1\114\1\61\15\0\1\116"+
    "\34\0\1\117\21\0\3\120\1\0\10\120\3\0\2\120"+
    "\3\0\7\120\2\0\2\121\1\120\1\0\3\121\4\120"+
    "\1\121\3\0\2\120\3\0\5\121\2\120";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\2\0\1\11\4\1\1\11\1\1\1\11"+
    "\3\1\6\11\7\1\1\11\3\1\7\0\1\1\1\0"+
    "\1\1\12\0\3\11\3\0\1\11\1\1\1\0\5\1"+
    "\1\0\2\1\2\0\1\1\3\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[81];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  String urlPrefix = System.getProperty("urlPrefix");
  Writer out;
  private HashMap<String, HashMap<Integer, String>> defs = null;
  public void setDefs(HashMap<String, HashMap<Integer, String>> defs) {
  	this.defs = defs;
  }

  public void reInit(char[] buf, int len) {
  	yyreset((Reader) null);
  	zzBuffer = buf;
  	zzEndRead = len;
	zzAtEOF = true;
	zzStartRead = 0;
  }

  public void write(Writer out) throws IOException {
  	this.out = out;
	yyline = 2;
	out.write("<a class=\"l\" name=\"1\">      1 </a>");
	while(yylex() != YYEOF) {
	}
  }

  public int getLine() {
  	return yyline-2;
  }

  public static void main(String argv[]) {
    if (argv.length <= 1) {
      System.out.println("Usage : java Xref <inputfile> <outfile>");
    }
    else {
      Date start = new Date();
      ShXref scanner = null;
      try {
          scanner = new ShXref( new BufferedReader(new java.io.FileReader(argv[0])));
	  BufferedWriter out = new BufferedWriter(new java.io.FileWriter(argv[1]));
	  out.write("<html><head><style>a{text-decoration:none;color:#444499;} .I{color:#000099;} .K{color:#000000; font-weight:bold;} .N{color:brown;} .c{color:grey;} .s{color:green;} .l{color: #666699; text-decoration:none; font-weight:normal;background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;} .hl{color: black; font-weight:bold; text-decoration:none; background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;} .d{color:#909; font-weight:bold; font-style:italic;} .f{color:#909;} .mf{color:#909;}</style></head><body><pre>");
	  scanner.write(out);
	  out.write("</pre></body></html>");
	  out.close();
      }
      catch (Exception e) {
        System.out.println(e);
        e.printStackTrace();
      }
      long span =  ((new Date()).getTime() - start.getTime());
      System.err.println("took: "+ span + " msec");
     }
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ShXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ShXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 24: break;
        case 20: 
          { out.write("<a href=\"");
			  out.write(urlPrefix);
			  out.write("refs=");
			  out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
			  out.write("\">");
			  out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
			  out.write("</a>");
          }
        case 25: break;
        case 3: 
          { out.write(yycharat(0));
          }
        case 26: break;
        case 7: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 27: break;
        case 18: 
          { out.write("\\'");
          }
        case 28: break;
        case 8: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">#");
          }
        case 29: break;
        case 17: 
          { out.write("\\\\");
          }
        case 30: break;
        case 15: 
          { String id = yytext();
 			if(Consts.shkwd.contains(id)) {
				out.write("<b>");out.write(id);out.write("</b>");
			} else {
				HashMap<Integer, String> tags;
				if(defs != null && (tags = defs.get(id)) != null) {
					int sz = 0;
					boolean written = false;
					if (tags.containsKey(new Integer(yyline-1))) {
							out.write("<a class=\"d\" name=\"");
							out.write(id);
							out.write("\">");
							out.write(id);
							out.write("</a>");
							written = true;
							break;
					} else if (tags.size() == 1) {
						out.write("<a class=\"f\" href=\"#");
						out.write(id);
						out.write("\">");
						out.write(id);
						out.write("</a>");
					} else {
						out.write("<span class=\"mf\">");
						out.write(id);
						out.write("</span>");
					}
				} else {
				out.write("<a href=\""+urlPrefix+"refs=");
				out.write(id);
				out.write("\">");
				out.write(id);
				out.write("</a>");
				}
			}
          }
        case 31: break;
        case 6: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 32: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 33: break;
        case 22: 
          { for(int mi = zzStartRead; mi < zzMarkedPos; mi++) {
			if(zzBuffer[mi] != '@') {
				out.write(zzBuffer[mi]);
			} else {
				out.write(" (at] ");
			}
		}
		//out.write("<a href=\"mailto:");
		//out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
		//out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 34: break;
        case 9: 
          { out.write( "&amp;");
          }
        case 35: break;
        case 19: 
          { out.write("<a href=\""+urlPrefix+"path=");
	out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
	out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 36: break;
        case 14: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 37: break;
        case 10: 
          { out.write( "&lt;");
          }
        case 38: break;
        case 16: 
          { out.write("\\\"");
          }
        case 39: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("</span>"); Util.readableLine(yyline, out);
          }
        case 40: break;
        case 23: 
          { out.write("<a href=\"");
	 out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
	 out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 41: break;
        case 11: 
          { out.write( "&gt;");
          }
        case 42: break;
        case 21: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 43: break;
        case 2: 
          { out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
          }
        case 44: break;
        case 1: 
          { 
          }
        case 45: break;
        case 5: 
          { Util.readableLine(yyline, out);
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
