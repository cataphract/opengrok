/* The following code was generated by JFlex 1.4.1 on 3/28/06 11:23 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.
 * Use is subject to license terms.
 */

/*
 * ident	"%Z%%M% %I%     %E% SMI"
 */

/*
 * Cross reference a C file
 */

package org.opensolaris.opengrok.analysis.c;
import java.util.*;
import java.io.*;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/28/06 11:23 PM from the specification file
 * <tt>/home/cb117521/prj/opengrok-0.3.1/src/org/opensolaris/opengrok/analysis/c/CXref.lex</tt>
 */
public class CXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int SCOMMENT = 3;
  public static final int QSTRING = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\32\1\0\2\1\22\0\1\1\1\4\1\42\1\47"+
    "\2\4\1\46\1\43\2\47\1\44\2\4\1\6\1\7\1\31\1\33"+
    "\11\3\1\51\1\4\1\40\1\4\1\41\1\4\1\52\1\17\1\34"+
    "\1\11\2\34\1\15\1\2\1\25\1\2\1\16\1\2\1\30\1\27"+
    "\1\14\1\13\1\21\2\2\1\50\1\22\1\2\1\20\1\2\1\24"+
    "\2\2\1\47\1\45\2\47\1\5\1\47\1\17\1\34\1\12\1\37"+
    "\1\34\1\15\1\2\1\26\1\2\1\16\1\2\1\36\1\27\1\14"+
    "\1\13\1\21\2\2\1\10\1\23\1\35\1\20\1\2\1\24\2\2"+
    "\3\47\1\4\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\2\3\1\5\1\4"+
    "\1\6\1\7\1\10\1\11\1\12\5\3\1\6\1\13"+
    "\2\3\1\2\1\14\1\15\1\3\1\16\1\0\1\4"+
    "\1\17\1\20\14\0\1\21\1\22\1\23\1\0\1\24"+
    "\2\4\3\0\1\25\1\0\1\25\3\0\1\25\2\0"+
    "\1\25\4\0\1\2\20\0\1\26\3\0\1\27\10\0"+
    "\1\25\1\30\6\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\327\0\u0183\0\327\0\u01ae\0\u01d9\0\327\0\327"+
    "\0\327\0\327\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\327"+
    "\0\u02db\0\u0306\0\u0331\0\u035c\0\327\0\u0387\0\u03b2\0\u012d"+
    "\0\u03dd\0\u0408\0\327\0\327\0\u0433\0\u045e\0\u0489\0\u0204"+
    "\0\u04b4\0\u04df\0\u050a\0\u022f\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\327\0\327\0\327\0\u05e1\0\327\0\u060c\0\u0637\0\u0662"+
    "\0\u068d\0\u06b8\0\u0204\0\u06e3\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u0764\0\u078f\0\u07ba\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\327\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993"+
    "\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\327\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0739\0\u0b6c"+
    "\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e1c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\10\2\12\21\10"+
    "\1\13\1\14\1\15\4\10\1\16\1\17\1\20\1\21"+
    "\2\12\1\22\1\12\1\10\2\12\1\6\1\7\1\23"+
    "\1\24\1\12\3\24\5\23\1\25\7\23\2\26\2\23"+
    "\1\27\1\14\1\24\4\23\1\30\1\17\1\31\2\12"+
    "\1\32\1\22\1\12\1\23\2\12\1\6\1\7\1\23"+
    "\1\24\1\12\3\24\5\23\1\25\7\23\2\26\2\23"+
    "\1\27\1\14\1\24\4\23\1\30\1\17\2\12\1\33"+
    "\1\12\1\22\1\12\1\23\2\12\1\6\1\34\1\23"+
    "\1\24\1\12\3\24\5\23\1\25\7\23\2\26\2\23"+
    "\1\27\1\35\1\24\4\23\1\30\1\17\4\12\1\22"+
    "\1\12\1\23\2\12\1\6\1\7\1\23\1\24\1\12"+
    "\3\24\5\23\1\25\7\23\2\26\2\23\1\27\1\14"+
    "\1\24\4\23\1\30\1\17\1\12\1\36\1\12\1\37"+
    "\1\22\1\12\1\23\2\12\54\0\1\7\30\0\1\14"+
    "\22\0\2\40\1\0\1\40\2\0\21\40\2\0\5\40"+
    "\10\0\1\40\2\0\3\41\1\11\26\41\1\0\1\11"+
    "\1\41\3\42\13\41\31\0\1\43\12\0\1\44\6\0"+
    "\3\41\1\11\20\41\1\45\5\41\1\0\1\11\1\41"+
    "\3\42\13\41\2\0\1\46\5\0\21\46\1\47\2\0"+
    "\4\46\10\0\1\46\4\0\2\50\1\0\2\50\1\51"+
    "\21\50\1\52\1\0\5\50\10\0\1\50\1\0\1\53"+
    "\2\0\2\54\1\0\24\54\2\0\5\54\10\0\1\54"+
    "\1\0\1\53\2\0\2\50\1\0\2\50\1\51\12\50"+
    "\2\55\5\50\1\52\1\0\5\50\10\0\1\50\1\0"+
    "\1\53\2\0\2\50\1\0\2\50\1\51\12\50\2\56"+
    "\5\50\1\52\1\0\5\50\10\0\1\50\1\0\1\53"+
    "\2\0\1\57\5\0\21\57\3\0\4\57\10\0\1\57"+
    "\3\0\1\60\113\0\1\61\2\0\1\62\36\0\1\63"+
    "\22\0\1\34\30\0\1\35\21\0\1\64\114\0\1\65"+
    "\1\0\1\62\10\0\1\42\27\0\1\42\22\0\1\42"+
    "\27\0\1\42\1\0\3\66\16\0\1\67\5\0\2\67"+
    "\2\0\1\67\1\0\1\67\13\0\2\67\2\0\1\67"+
    "\15\0\2\46\1\0\2\46\1\70\21\46\1\71\1\0"+
    "\5\46\10\0\1\46\4\0\1\72\5\0\21\72\3\0"+
    "\4\72\10\0\1\72\4\0\2\50\1\0\2\50\1\51"+
    "\1\73\1\74\1\75\3\50\1\76\2\50\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\2\50\1\52\1\0\5\50"+
    "\10\0\1\50\1\0\1\53\2\0\1\105\5\0\21\105"+
    "\3\0\4\105\10\0\1\105\4\0\2\106\1\0\24\106"+
    "\2\0\5\106\10\0\1\106\4\0\2\50\1\0\2\50"+
    "\1\51\11\50\1\107\7\50\1\52\1\0\5\50\10\0"+
    "\1\50\1\0\1\53\2\0\2\50\1\0\2\50\1\51"+
    "\12\50\2\110\5\50\1\52\1\0\5\50\10\0\1\50"+
    "\1\0\1\53\2\0\2\57\1\0\24\57\1\52\1\0"+
    "\5\57\10\0\1\57\3\0\1\60\40\0\1\111\11\0"+
    "\1\64\41\0\1\111\44\0\3\66\16\0\1\67\5\0"+
    "\2\67\2\0\1\67\1\0\1\67\13\0\2\67\2\66"+
    "\1\67\15\0\2\46\1\0\2\46\1\70\1\112\1\113"+
    "\1\114\3\46\1\115\2\46\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\2\46\1\71\1\0\5\46\10\0\1\46"+
    "\4\0\1\124\5\0\21\124\3\0\4\124\10\0\1\124"+
    "\4\0\2\72\1\0\24\72\1\71\1\0\5\72\10\0"+
    "\1\72\4\0\2\50\1\0\2\50\1\51\1\50\2\73"+
    "\1\125\5\50\1\126\7\50\1\52\1\0\5\50\10\0"+
    "\1\50\1\0\1\53\2\0\2\50\1\0\2\50\1\51"+
    "\7\50\1\127\11\50\1\52\1\0\5\50\10\0\1\50"+
    "\1\0\1\53\2\0\2\50\1\0\2\50\1\51\20\50"+
    "\1\73\1\52\1\0\3\50\1\73\1\50\10\0\1\50"+
    "\1\0\1\53\2\0\2\50\1\0\2\50\1\51\14\50"+
    "\1\130\4\50\1\52\1\0\5\50\10\0\1\50\1\0"+
    "\1\53\2\0\2\50\1\0\2\50\1\51\17\50\1\77"+
    "\1\50\1\52\1\0\5\50\10\0\1\50\1\0\1\53"+
    "\2\0\2\50\1\0\2\50\1\51\12\50\2\131\5\50"+
    "\1\52\1\0\5\50\10\0\1\50\1\0\1\53\2\0"+
    "\2\132\1\0\3\105\21\132\2\0\5\132\10\0\1\132"+
    "\4\0\2\106\1\0\2\106\1\133\21\106\2\0\5\106"+
    "\10\0\1\106\4\0\2\50\1\0\2\50\1\51\21\50"+
    "\1\52\1\0\5\50\10\0\1\50\1\134\1\53\2\0"+
    "\2\50\1\0\2\50\1\51\11\50\1\135\7\50\1\52"+
    "\1\0\5\50\10\0\1\50\1\0\1\53\2\0\2\46"+
    "\1\0\2\46\1\70\21\46\1\71\1\0\5\46\1\0"+
    "\1\136\6\0\1\46\4\0\2\46\1\0\2\46\1\70"+
    "\1\46\2\112\1\137\5\46\1\140\7\46\1\71\1\0"+
    "\5\46\10\0\1\46\4\0\2\46\1\0\2\46\1\70"+
    "\1\46\2\112\1\137\5\46\1\140\7\46\1\71\1\0"+
    "\5\46\1\0\1\136\6\0\1\46\4\0\2\46\1\0"+
    "\2\46\1\70\7\46\1\141\11\46\1\71\1\0\5\46"+
    "\10\0\1\46\4\0\2\46\1\0\2\46\1\70\20\46"+
    "\1\112\1\71\1\0\3\46\1\112\1\46\10\0\1\46"+
    "\4\0\2\46\1\0\2\46\1\70\14\46\1\142\4\46"+
    "\1\71\1\0\5\46\10\0\1\46\4\0\2\46\1\0"+
    "\2\46\1\70\14\46\1\142\4\46\1\71\1\0\5\46"+
    "\1\0\1\136\6\0\1\46\4\0\2\46\1\0\2\46"+
    "\1\70\17\46\1\116\1\46\1\71\1\0\5\46\10\0"+
    "\1\46\4\0\2\46\1\0\2\46\1\70\12\46\2\143"+
    "\5\46\1\71\1\0\5\46\10\0\1\46\4\0\2\46"+
    "\1\0\2\46\1\70\12\46\2\143\5\46\1\71\1\0"+
    "\5\46\1\0\1\136\6\0\1\46\4\0\2\144\1\0"+
    "\3\124\21\144\2\0\5\144\10\0\1\144\4\0\2\50"+
    "\1\0\2\50\1\51\4\50\1\145\14\50\1\52\1\0"+
    "\5\50\10\0\1\50\1\0\1\53\2\0\2\50\1\0"+
    "\2\50\1\51\11\50\1\73\7\50\1\52\1\0\5\50"+
    "\10\0\1\50\1\0\1\53\2\0\2\50\1\0\2\50"+
    "\1\51\10\50\1\146\10\50\1\52\1\0\5\50\10\0"+
    "\1\50\1\0\1\53\2\0\2\50\1\0\2\50\1\51"+
    "\12\50\2\73\5\50\1\52\1\0\5\50\10\0\1\50"+
    "\1\0\1\53\2\0\2\50\1\0\2\50\1\51\17\50"+
    "\1\147\1\50\1\52\1\0\5\50\10\0\1\50\1\0"+
    "\1\53\2\0\2\132\1\0\3\105\21\132\1\52\1\0"+
    "\5\132\10\0\1\132\4\0\2\150\1\0\24\150\2\0"+
    "\5\150\10\0\1\150\33\0\1\151\23\0\2\50\1\0"+
    "\2\50\1\51\1\107\20\50\1\52\1\0\5\50\10\0"+
    "\1\107\1\134\1\53\2\0\2\46\1\0\2\46\1\70"+
    "\4\46\1\152\14\46\1\71\1\0\5\46\10\0\1\46"+
    "\4\0\2\46\1\0\2\46\1\70\11\46\1\112\7\46"+
    "\1\71\1\0\5\46\10\0\1\46\4\0\2\46\1\0"+
    "\2\46\1\70\10\46\1\153\10\46\1\71\1\0\5\46"+
    "\10\0\1\46\4\0\2\46\1\0\2\46\1\70\12\46"+
    "\2\112\5\46\1\71\1\0\5\46\10\0\1\46\4\0"+
    "\2\46\1\0\2\46\1\70\17\46\1\154\1\46\1\71"+
    "\1\0\5\46\10\0\1\46\4\0\2\144\1\0\3\124"+
    "\21\144\1\71\1\0\5\144\1\0\1\136\6\0\1\144"+
    "\4\0\2\50\1\0\2\50\1\51\5\50\1\73\13\50"+
    "\1\52\1\0\5\50\10\0\1\50\1\0\1\53\2\0"+
    "\2\50\1\0\2\50\1\51\7\50\1\73\11\50\1\52"+
    "\1\0\5\50\10\0\1\50\1\0\1\53\31\0\1\155"+
    "\23\0\2\46\1\0\2\46\1\70\5\46\1\112\13\46"+
    "\1\71\1\0\5\46\10\0\1\46\4\0\2\46\1\0"+
    "\2\46\1\70\7\46\1\112\11\46\1\71\1\0\5\46"+
    "\10\0\1\46\4\0\2\46\1\0\2\46\1\70\20\46"+
    "\1\112\1\71\1\0\3\46\1\112\1\46\1\0\1\136"+
    "\6\0\1\46\4\0\30\156\1\0\5\156\4\0\3\156"+
    "\1\0\3\156\2\0\2\157\4\156\22\157\1\0\5\157"+
    "\4\0\3\156\1\0\1\157\2\156";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3655];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\3\1\1\11\1\1\1\11\2\1\4\11"+
    "\5\1\1\11\4\1\1\11\3\1\1\0\1\1\2\11"+
    "\14\0\3\11\1\0\1\11\2\1\3\0\1\1\1\0"+
    "\1\1\3\0\1\1\2\0\1\1\4\0\1\11\20\0"+
    "\1\1\3\0\1\11\10\0\2\1\6\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  Writer out;
  String urlPrefix = System.getProperty("urlPrefix");
  private HashMap<String, HashMap<Integer, String>> defs = null;
  public void setDefs(HashMap<String, HashMap<Integer, String>> defs) {
  	this.defs = defs;
  }

  public void reInit(char[] buf, int len) {
  	yyreset((Reader) null);
  	zzBuffer = buf;
  	zzEndRead = len;
	zzAtEOF = true;
	zzStartRead = 0;
  }

  public void write(Writer out) throws IOException {
  	this.out = out;
	yyline = 2;
	out.write("<a class=\"l\" name=\"1\">      1 </a>");
	while(yylex() != YYEOF) {
	}
  }

  public int getLine() {
  	return yyline-2;
  }

  public static void main(String argv[]) {
    if (argv.length <= 1) {
      System.out.println("Usage : java Xref <inputfile> <outfile> <ctags binary> ");
    }
    else {
      Date start = new Date();
      CXref scanner = null;
      try {
	  //Ctags ctags = new Ctags(argv[2]);
          scanner = new CXref( new BufferedReader(new java.io.FileReader(argv[0])));
	  //scanner.setDefs(ctags.doCtags(argv[0] + "\n"));
	  BufferedWriter out = new BufferedWriter(new java.io.FileWriter(argv[1]));
	  out.write("<html><head><style>a{text-decoration:none;color:#444499;} .I{color:#000099;} .K{color:#000000; font-weight:bold;} .N{color:brown;} .c{color:grey;} .s{color:green;} .hl{color: black; font-weight:bold; text-decoration:none; background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;} .l{color: #666699; text-decoration:none; font-weight:normal;background-color:#eee; margin-right:.2em;padding-left:.2em;padding-right:.5em;} .d{color:#909; font-weight:bold; font-style:italic;} .f{color:#909;} .mf{color:#909;}</style></head><body><pre>");
	  scanner.write(out);
	  out.write("</pre></body></html>");
	  out.close();
      }
      catch (Exception e) {
        System.out.println(e);
        e.printStackTrace();
      }
      long span =  ((new Date()).getTime() - start.getTime());
      System.err.println("took: "+ span + " msec");
     }
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { out.write(yycharat(0));
          }
        case 26: break;
        case 9: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 27: break;
        case 18: 
          { out.write("\\\\");
          }
        case 28: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("</span>");Util.readableLine(yyline, out);
          }
        case 29: break;
        case 8: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 30: break;
        case 11: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 31: break;
        case 20: 
          { out.write("\\\'");
          }
        case 32: break;
        case 14: 
          { String id = yytext();
 			if(Consts.kwd.contains(id)) {
				out.write("<b>");out.write(id);out.write("</b>");
			} else {
				HashMap<Integer, String> tags;
				if(defs != null && (tags = defs.get(id)) != null) {
					int sz = 0;
					boolean written = false;
					if (tags.containsKey(new Integer(yyline-1))) {
							out.write("<a class=\"d\" name=\"");
							out.write(id);
							out.write("\">");
							out.write(id);
							out.write("</a>");
							written = true;
							break;
					} else if (tags.size() == 1) {
						out.write("<a class=\"f\" href=\"#");
						out.write(id);
						out.write("\">");
						out.write(id);
						out.write("</a>");
					} else {
						out.write("<span class=\"mf\">");
						out.write(id);
						out.write("</span>");
					}
				} else {
				out.write("<a href=\"");
				out.write(urlPrefix);
				out.write("defs=");
				out.write(id);
				out.write("\">");
				out.write(id);
				out.write("</a>");
				}
			}
          }
        case 33: break;
        case 10: 
          { out.write( "&amp;");
          }
        case 34: break;
        case 21: 
          { out.write("<a href=\""+urlPrefix+"path=");
	out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
	out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 35: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 36: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 37: break;
        case 17: 
          { out.write("\\\"");
          }
        case 38: break;
        case 15: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">//");
          }
        case 39: break;
        case 4: 
          { out.write("<span class=\"n\">"); out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead); out.write("</span>");
          }
        case 40: break;
        case 25: 
          { out.write("<a href=\"");
	 out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
	 out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 41: break;
        case 16: 
          { yybegin(COMMENT);out.write("<span class=\"c\">/*");
          }
        case 42: break;
        case 24: 
          { for(int mi = zzStartRead; mi < zzMarkedPos; mi++) {
			if(zzBuffer[mi] != '@') {
				out.write(zzBuffer[mi]);
			} else {
				out.write(" (at) ");
			}
		}
		//out.write("<a href=\"mailto:");
		//out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("\">");
		//out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);out.write("</a>");
          }
        case 43: break;
        case 19: 
          { yybegin(YYINITIAL); out.write("*/</span>");
          }
        case 44: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 45: break;
        case 22: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 46: break;
        case 23: 
          { out.write("&lt;");
	out.write("<a href=\""+urlPrefix+"path=");
	out.write(zzBuffer, zzStartRead+1, zzMarkedPos-zzStartRead-2);out.write("\">");
	out.write(zzBuffer, zzStartRead+1, zzMarkedPos-zzStartRead-2);out.write("</a>");
	out.write("&gt;");
          }
        case 47: break;
        case 2: 
          { out.write(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
          }
        case 48: break;
        case 1: 
          { 
          }
        case 49: break;
        case 5: 
          { Util.readableLine(yyline, out);
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
